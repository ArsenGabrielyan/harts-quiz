// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum AccountType {
  student
  personal
  teacher
}

enum QuestionType {
  pick_one
  true_false
  text
}

enum QuizVisibility {
  public
  private
  unlisted
}

type Question {
  question    String
  answers     String[]
  correct     String
  timer       Int
  type        QuestionType
  points      Int
  description String?
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String? @unique
  username              String? @unique
  organization          String?
  password              String?
  image                 String?
  accountType           AccountType @default(personal)
  emailVerified         DateTime?
  isTwoFactorEnabled    Boolean                @default(false)
  soundEffectOn         Boolean                @default(false)
  showFavoriteSubject   Boolean                @default(true)
  bio                   String?
  favorites             String[]
  favoriteSubject       String?
  twoFactorConfirmation TwoFactorConfirmation?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HartsQuiz {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  teacher      String
  teacherEmail String
  description  String?
  questions    Question[]
  visibility   QuizVisibility
  subject      String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([teacherEmail])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId])
}
